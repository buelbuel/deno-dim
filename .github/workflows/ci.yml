name: CI

on:
    push:
        branches: [main]
        tags:
            - v*
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Setup Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Format code
              run: deno fmt

            - name: Check if formatting caused changes
              id: check_changes
              run: |
                git diff --exit-code || echo "::warning::Formatting changes detected. The CI has fixed them automatically."

            - name: Run linter
              run: deno lint

            - name: Type check
              run: deno check mod.ts

            - name: Run tests
              run: deno task test

            - name: Commit formatting changes if on PR
              if: github.event_name == 'pull_request' && steps.check_changes.outcome == 'failure'
              run: |
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add .
                git commit -m "Apply automatic formatting"
                git push

    publish-jsr:
        needs: test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest

        permissions:
            contents: read
            id-token: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x

            - name: Publish to JSR
              run: deno publish

    release:
        needs: test
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest

        permissions:
            contents: write
            id-token: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Create GitHub Release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                TAG_NAME="${GITHUB_REF#refs/tags/}"
                RELEASE_NAME="Release ${TAG_NAME}"

                # Create a release using GitHub CLI
                gh release create "$TAG_NAME" \
                  --title "$RELEASE_NAME" \
                  --notes "## Deno-dim $TAG_NAME

                ### Installation

                \`\`\`ts
                // From JSR
                import * as dim from 'jsr:@buelbuel/dim@$TAG_NAME'

                // From deno.land/x
                import * as dim from 'https://deno.land/x/dim@$TAG_NAME/mod.ts'
                \`\`\`

                See [README.md](https://github.com/buelbuel/deno-dim/blob/main/README.md) for full documentation."

            - name: Setup Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x

            - name: Publish to JSR with version tag
              run: deno publish
